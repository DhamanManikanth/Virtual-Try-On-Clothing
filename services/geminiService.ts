
import { GoogleGenAI, Modality } from "@google/genai";

// Ensure the API key is available in the environment variables
if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const dataUrlToBlob = (dataUrl: string) => {
    const parts = dataUrl.match(/:(.*?);/);
    if (!parts || parts.length < 2) {
      throw new Error('Invalid dataURL format');
    }
    const mimeType = parts[1];
    const base64Data = dataUrl.split(',')[1];
    return { mimeType, data: base64Data };
};


export const virtualTryOn = async (personImage: string, clothingImage: string): Promise<string> => {
  try {
    const personBlob = dataUrlToBlob(personImage);
    const clothingBlob = dataUrlToBlob(clothingImage);

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: personBlob.data,
              mimeType: personBlob.mimeType,
            },
          },
          {
            inlineData: {
              data: clothingBlob.data,
              mimeType: clothingBlob.mimeType,
            },
          },
          {
            text: `Take the clothing item from the second image and place it realistically on the person in the first image. The final output should be a high-quality, photorealistic image of the person wearing the clothes, maintaining the original background and the person's pose and body shape. The clothing should fit naturally.`,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });
    
    // Process response and extract the generated image
    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error('No image was generated by the API.');

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to generate virtual try-on image.");
  }
};
